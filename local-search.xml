<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/09/19/hello-world/"/>
    <url>/2025/09/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Genesis仿真环境学习</title>
    <link href="/2025/04/11/Genesis%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/11/Genesis%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>创建Conda虚拟环境，并且安装Pytorch，Genesisi官方要求使用Python3.9+</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n l_gs python=3.10 -y<br></code></pre></td></tr></table></figure><p>激活环境，从Pytorch官网获取下载指令，这里使用之前用过的cuda11.8版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnoda activate l_gs<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118<br></code></pre></td></tr></table></figure><p>然后使用pip安装Genesis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install genesis-world<br></code></pre></td></tr></table></figure><hr><h2 id="安装可选功能"><a href="#安装可选功能" class="headerlink" title="安装可选功能"></a>安装可选功能</h2><p>考虑后面的仿真任务，安装提供的运动规划功能。官方提供了简易的OMPL的API</p><p>下载whl文件，使用pip指令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install ompl-1.7.0-cp310-cp310-manylinux_2_28_x86_64.whl <br></code></pre></td></tr></table></figure><p>因为conda环境使用python3.10，linux的x86架构，下载对应版本文件</p><p>至此，Genesis的安装完成</p><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>发现Genesis不能像Pybullet一样保存场景，这对于需要手动提前设置场景的自动化实验很不友好😢，而且暂时没有发现鼠标交互功能，即用鼠标拖拽机器人，这种示教功能。</p>]]></content>
    
    
    <categories>
      
      <category>仿真</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Genesis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda环境程序打包到docker</title>
    <link href="/2025/04/09/conda%E7%8E%AF%E5%A2%83%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E5%88%B0docker/"/>
    <url>/2025/04/09/conda%E7%8E%AF%E5%A2%83%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E5%88%B0docker/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><p>尝试将Conda环境下的实验，打包为Docker镜像。</p><p>实验内容包含，Pybullet搭建仿真环境，PyTorch框架的神经网络，用于对目标点云的获取。</p><p>实验中需要用到GPU加速。</p><p>学习了Doker的一些基本指令，和Dockerfile内容的编写。</p><hr><h2 id="导出当前的conda环境依赖"><a href="#导出当前的conda环境依赖" class="headerlink" title="导出当前的conda环境依赖"></a>导出当前的conda环境依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate env-name<br>conda <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> --no-builds &gt; environment.yml<br></code></pre></td></tr></table></figure><hr><h2 id="准备项目目录如下"><a href="#准备项目目录如下" class="headerlink" title="准备项目目录如下"></a>准备项目目录如下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">your_project/<br>├── model/<br>├── param/<br>├── point_cloud/           ← 点云保存目录（需挂载）<br>├── scripts/<br>│   └── pipe_sim.py        ← 主程序入口<br>├── utils/<br>├── Dockerfile<br>└── pipe_sim_env.yml       ← Conda 环境配置<br></code></pre></td></tr></table></figure><hr><h2 id="编写Dockerfile文件的内容"><a href="#编写Dockerfile文件的内容" class="headerlink" title="编写Dockerfile文件的内容"></a>编写Dockerfile文件的内容</h2><p>该 Dockerfile 构建了一个用于运行 PyTorch 项目的镜像，包含 GPU 支持、系统依赖、非 root 用户环境、Conda 虚拟环境等。</p><hr><h3 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> pytorch/pytorch:<span class="hljs-number">2.5</span>.<span class="hljs-number">1</span>-cuda11.<span class="hljs-number">8</span>-cudnn9-runtime<br></code></pre></td></tr></table></figure><ul><li>使用官方 PyTorch 镜像（已包含 Python、PyTorch、CUDA、cuDNN）。</li><li>版本为 PyTorch 2.5.1，CUDA 11.8。</li><li>版本为环境定制，从 pipe_sim_env.yml 得到。</li><li>最后上 Docker Hub 搜索可用版本。</li></ul><hr><h3 id="设置为非交互模式安装软件"><a href="#设置为非交互模式安装软件" class="headerlink" title="设置为非交互模式安装软件"></a>设置为非交互模式安装软件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND=noninteractive<br></code></pre></td></tr></table></figure><ul><li>避免安装时弹出交互界面，适合自动构建。</li><li>使用默认值进行交互。</li></ul><hr><h3 id="安装系统依赖"><a href="#安装系统依赖" class="headerlink" title="安装系统依赖"></a>安装系统依赖</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="language-bash">    libgl1-mesa-glx \</span><br><span class="language-bash">    libxext6 \</span><br><span class="language-bash">    libsm6 \</span><br><span class="language-bash">    libxrender1 \</span><br><span class="language-bash">    libglib2.0-0 \</span><br><span class="language-bash">    &amp;&amp; apt-get clean &amp;&amp; <span class="hljs-built_in">rm</span> -rf /var/lib/apt/lists/*</span><br></code></pre></td></tr></table></figure><ul><li>安装图形显示相关依赖，常用于 OpenCV、matplotlib。</li><li>清除缓存以减小镜像体积。</li></ul><hr><h3 id="创建非-root-用户"><a href="#创建非-root-用户" class="headerlink" title="创建非 root 用户"></a>创建非 root 用户</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> useradd -m -u 1000 appuser</span><br></code></pre></td></tr></table></figure><ul><li><p>创建用户名为 <code>appuser</code> 的普通用户，避免容器中直接以 root 身份运行。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>useradd</code></td><td>Linux 命令，用于创建新用户。</td></tr><tr><td><code>-m</code></td><td>创建用户的主目录（例如 <code>/home/appuser</code>）。</td></tr><tr><td><code>-u 1000</code></td><td>指定用户的 UID（用户标识号）为 <code>1000</code>。</td></tr><tr><td><code>appuser</code></td><td>要创建的用户名。</td></tr></tbody></table></li></ul><hr><h3 id="拷贝并构建-Conda-环境"><a href="#拷贝并构建-Conda-环境" class="headerlink" title="拷贝并构建 Conda 环境"></a>拷贝并构建 Conda 环境</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> pipe_sim_env.yml /tmp/pipe_sim_env.yml</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> conda <span class="hljs-built_in">env</span> create -f /tmp/pipe_sim_env.yml &amp;&amp; \</span><br><span class="language-bash">    conda clean -ya</span><br></code></pre></td></tr></table></figure><ul><li>将本地 Conda 环境配置文件复制到容器中。</li><li>使用 Conda 创建名为 <code>pipe_sim</code> 的环境。</li><li>清除镜像里的 Conda 缓存。</li></ul><hr><h3 id="拷贝项目代码并设置权限"><a href="#拷贝项目代码并设置权限" class="headerlink" title="拷贝项目代码并设置权限"></a>拷贝项目代码并设置权限</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /workspace</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> scripts/ ./scripts/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> model/ ./model/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> param/ ./param/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> utils/ ./utils/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /workspace/point_cloud &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">chmod</span> -R 777 /workspace</span><br></code></pre></td></tr></table></figure><ul><li>设置工作目录为 <code>/workspace</code>。</li><li>拷贝本地代码目录到镜像中。</li><li>创建点云数据输出文件夹 <code>point_cloud</code>。</li><li>赋予所有人可读写权限（简化调试）。</li></ul><hr><h3 id="授权给普通用户"><a href="#授权给普通用户" class="headerlink" title="授权给普通用户"></a>授权给普通用户</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R appuser:appuser /workspace</span><br></code></pre></td></tr></table></figure><ul><li>将 <code>/workspace</code> 所有权转移给 <code>appuser</code>，避免权限问题。</li></ul><hr><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">USER</span> appuser<br></code></pre></td></tr></table></figure><ul><li>后续命令以 <code>appuser</code> 用户身份执行。</li></ul><hr><h3 id="设置默认激活-Conda-环境"><a href="#设置默认激活-Conda-环境" class="headerlink" title="设置默认激活 Conda 环境"></a>设置默认激活 Conda 环境</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source activate pipe_sim&quot;</span> &gt; /home/appuser/.bashrc</span><br></code></pre></td></tr></table></figure><ul><li>每次进入容器时自动激活 <code>pipe_sim</code> 虚拟环境。</li></ul><hr><h3 id="文件结构示意"><a href="#文件结构示意" class="headerlink" title="文件结构示意"></a>文件结构示意</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">/workspace<br>├── scripts/         # 主程序<br>├── model/           # 模型权重或定义<br>├── param/           # 参数配置<br>├── utils/           # 工具函数<br>└── point_cloud/     # 输出点云数据<br></code></pre></td></tr></table></figure><hr><h2 id="Dockerfile-构建流程图"><a href="#Dockerfile-构建流程图" class="headerlink" title="Dockerfile 构建流程图"></a>Dockerfile 构建流程图</h2><pre><code class=" mermaid">flowchart TD    A[FROM 镜像] --&gt; B[安装系统依赖]    B --&gt; C[创建普通用户]    C --&gt; D[构建 Conda 环境]    D --&gt; E[拷贝项目文件]    E --&gt; F[设置权限]    F --&gt; G[切换用户]    G --&gt; H[设置默认环境激活]</code></pre><hr>]]></content>
    
    
    <categories>
      
      <category>实用方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇测试文章</title>
    <link href="/2025/04/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>正文</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
